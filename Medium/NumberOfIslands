class Solution {
public:
    
    bool isSafe(int row, int col,vector<vector<char>> grid, vector<vector<bool>> visited)
    {
        int ROW = grid.size();
        int COL = grid[0].size();
        return (row >=0 && row < ROW && col >= 0 && col < COL &&  grid[row][col] != '0' && visited[row][col] == false );
        
    }
    
    
    void DFS(int row, int col,vector<vector<char>> grid, vector<vector<bool>> & visited)
    {
        static vector<int> rowIdx {0 ,-1,0,1};
        static vector<int> colIdx {-1, 0,1,0};
        
        
        visited[row][col] = true;
        //cout << "visited[" << row << "]["<< col << "]  = true" << endl;
        for(int i = 0 ; i < 4 ; i ++)
        {
            if(isSafe(row+rowIdx[i], col + colIdx[i], grid, visited))
            {
               // cout << "grid[" << row+rowIdx[i] << "]["<< col + colIdx[i] << "]  is safe" << endl;
                DFS(row+rowIdx[i], col + colIdx[i], grid, visited);
                
            }
            
        } 
        
    }
    
    int numIslands(vector<vector<char>>& grid) {
        if(grid.size() < 1)
            return 0;
        int ROW = grid.size();
        int COL = grid[0].size();
        int count = 0;
        vector<vector<bool>> visited(ROW,vector<bool>(COL,false));
        
        for(int i = 0 ; i < ROW ; ++i)
            for(int j = 0 ; j < COL ; ++j)
            {
                if(grid[i][j] != '0' && (visited[i][j] == false))
                {
                    //cout << grid[i][j] << endl;
                    DFS(i, j, grid, visited);
                    count++;
                }
                
            }
        return count;
    }
};
